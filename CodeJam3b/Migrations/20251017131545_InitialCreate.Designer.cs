// <auto-generated />
using System;
using CodeJam3b.Models.Movies;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeJam3b.Migrations
{
    [DbContext(typeof(LetterBoxDbContext))]
    [Migration("20251017131545_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeJam3b.Models.Lists.Diary", b =>
                {
                    b.Property<string>("DiaryId")
                        .HasColumnType("text")
                        .HasColumnName("diary_id");

                    b.Property<string>("MovieId")
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<string>("RatingId")
                        .HasColumnType("text")
                        .HasColumnName("rating_id");

                    b.HasKey("DiaryId");

                    b.HasIndex("MovieId");

                    b.HasIndex("RatingId");

                    b.ToTable("diary");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Fav", b =>
                {
                    b.Property<string>("FavId")
                        .HasColumnType("text")
                        .HasColumnName("fav_id");

                    b.Property<string>("MovieId")
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.HasKey("FavId");

                    b.HasIndex("MovieId");

                    b.ToTable("fav");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Watched", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DiaryId")
                        .HasColumnType("text")
                        .HasColumnName("diary_id");

                    b.Property<string>("FavId")
                        .HasColumnType("text")
                        .HasColumnName("fav_id");

                    b.Property<string>("MovieId")
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("watched");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Watchlist", b =>
                {
                    b.Property<string>("WatchlistId")
                        .HasColumnType("text")
                        .HasColumnName("watchlist_id");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("MovieId")
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.HasKey("WatchlistId");

                    b.HasIndex("MovieId");

                    b.ToTable("watchlist");
                });

            modelBuilder.Entity("CodeJam3b.Models.Movies.Movie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double?>("AvgRating")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_rating");

                    b.Property<int?>("DurationMins")
                        .HasColumnType("integer")
                        .HasColumnName("duration_mins");

                    b.Property<string>("Genre")
                        .HasColumnType("text")
                        .HasColumnName("genre");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RatingId")
                        .HasColumnType("uuid")
                        .HasColumnName("rating_id");

                    b.Property<string>("RatingId1")
                        .HasColumnType("text");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.HasKey("Id");

                    b.HasIndex("RatingId1");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("CodeJam3b.Models.Movies.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("MovieName")
                        .HasColumnType("text")
                        .HasColumnName("movie_name");

                    b.Property<string>("RatingId")
                        .HasColumnType("text")
                        .HasColumnName("rating_id");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.Property<int?>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("stars");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("CodeJam3b.Models.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("DiaryId")
                        .HasColumnType("text")
                        .HasColumnName("diary_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<Guid?>("WatchedGuidId")
                        .HasColumnType("uuid");

                    b.Property<string>("WatchedId")
                        .HasColumnType("text")
                        .HasColumnName("watched_id");

                    b.Property<string>("WatchlistId")
                        .HasColumnType("text")
                        .HasColumnName("watchlist_id");

                    b.HasKey("UserId");

                    b.HasIndex("DiaryId");

                    b.HasIndex("WatchedId")
                        .IsUnique();

                    b.HasIndex("WatchlistId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Diary", b =>
                {
                    b.HasOne("CodeJam3b.Models.Movies.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("CodeJam3b.Models.Movies.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.Navigation("Movie");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Fav", b =>
                {
                    b.HasOne("CodeJam3b.Models.Movies.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Watched", b =>
                {
                    b.HasOne("CodeJam3b.Models.Movies.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Watchlist", b =>
                {
                    b.HasOne("CodeJam3b.Models.Movies.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeJam3b.Models.Movies.Movie", b =>
                {
                    b.HasOne("CodeJam3b.Models.Movies.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId1");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CodeJam3b.Models.Movies.Rating", b =>
                {
                    b.HasOne("CodeJam3b.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeJam3b.Models.Users.User", b =>
                {
                    b.HasOne("CodeJam3b.Models.Lists.Diary", "Diary")
                        .WithMany()
                        .HasForeignKey("DiaryId");

                    b.HasOne("CodeJam3b.Models.Lists.Watched", "Watched")
                        .WithOne("User")
                        .HasForeignKey("CodeJam3b.Models.Users.User", "WatchedId");

                    b.HasOne("CodeJam3b.Models.Lists.Watchlist", "Watchlist")
                        .WithMany()
                        .HasForeignKey("WatchlistId");

                    b.Navigation("Diary");

                    b.Navigation("Watched");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("CodeJam3b.Models.Lists.Watched", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
